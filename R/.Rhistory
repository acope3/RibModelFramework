library(testthat)
library(AnaCoDa)
#test_that("PANSE Model testing simulated versus actual accuracy", {
# Skip unless manually run or changed
#if (F)
#    skip("PANSE Model testing is optional.")
#####################
### Initial Setup ###
#####################
set.seed(500)
rfp_file = "RFP_test_Jan.csv"
phi_file = "simulated_phi_file_1000_genes.csv"
# Test with Jeremy's simulated genome data
fileName = file.path("../Input/Stochastic_Simulation/", rfp_file)
fileTable = file.path("../Input/Stochastic_Simulation/", phi_file)
fileTruePhiValues = file.path("../Input/Stochastic_Simulation/", phi_file)
fileTrueAlphaValues = file.path("../Input/Stochastic_Simulation/", "simAlphaJanuary.csv")
fileTrueLambdaPrimeValues = file.path("../Input/Stochastic_Simulation/", "simLambdaPrimeJanuary.csv")
# Ensure the input files exist.
test_that("file exists: simulated_rfp_file_750_genes.csv", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulated_phi_file_750_genes.csv", {
expect_equal(file.exists(fileTable), T)
})
test_that("file exists: simulated_phi_file_750_genes.csv", {
expect_equal(file.exists(fileTruePhiValues), T)
})
test_that("file exists: RFPAlphaValues.csv", {
expect_equal(file.exists(fileTrueAlphaValues), T)
})
test_that("file exists: RFPLambdaPrimeValues.csv", {
expect_equal(file.exists(fileTrueLambdaPrimeValues), T)
})
genome <- initializeGenomeObject(file = fileName, fasta = FALSE, simulated = F)
phiValues <- read.table(file = fileTable, sep = ",", header = TRUE)
phiMean <- phiValues[,2]
sphi_init <- c(1)
numMixtures <- 1
mixDef <- "allUnique"
geneAssignment <- c(rep(1, length(genome)))
parameter1 <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
initial.expression.values = phiMean, model= "PA", split.serine = TRUE, mixture.definition = mixDef)
parameter1$initMutationSelectionCategories(c(fileTrueAlphaValues), 1, "Alpha")
parameter1$initMutationSelectionCategories(c(fileTrueLambdaPrimeValues), 1, "LambdaPrime")
parameter2 <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
initial.expression.values = phiMean, model= "PA", split.serine = TRUE, mixture.definition = mixDef)
parameter2$initMutationSelectionCategories(c(fileTrueAlphaValues), 1, "Alpha")
parameter2$initMutationSelectionCategories(c(fileTrueLambdaPrimeValues), 1, "LambdaPrime")
parameter3 <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
initial.expression.values = phiMean, model= "PA", split.serine = TRUE, mixture.definition = mixDef)
parameter3$initMutationSelectionCategories(c(fileTrueAlphaValues), 1, "Alpha")
parameter3$initMutationSelectionCategories(c(fileTrueLambdaPrimeValues), 1, "LambdaPrime")
parameter4 <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
initial.expression.values = phiMean, model= "PA", split.serine = TRUE, mixture.definition = mixDef)
parameter4$initMutationSelectionCategories(c(fileTrueAlphaValues), 1, "Alpha")
parameter4$initMutationSelectionCategories(c(fileTrueLambdaPrimeValues), 1, "LambdaPrime")
samples <- 5000
thinning <- 20
adaptiveWidth <- 10
est.expression=T, est.csp=T, est.hyper=F)
mcmc1 <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=T, est.csp=T, est.hyper=F)
mcmc2 <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=T, est.csp=T, est.hyper=F)
mcmc3 <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=T, est.csp=T, est.hyper=F)
mcmc4 <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=T, est.csp=T, est.hyper=F)
logFileString1 <- paste0("runPAModel2018Log1", samples)
logFileString2 <- paste0("runPAModel2018Log2", samples)
logFileString3 <- paste0("runPAModel2018Log3", samples)
logFileString4 <- paste0("runPAModel2018Log4", samples)
model1 <- initializeModelObject(parameter1, "PA", rfp.count.column = 1)
model2 <- initializeModelObject(parameter2, "PA", rfp.count.column = 1)
model3 <- initializeModelObject(parameter3, "PA", rfp.count.column = 1)
model4 <- initializeModelObject(parameter4, "PA", rfp.count.column = 1)
outFile1 = file.path("./Out/", logFileString1)
outFile2 = file.path("./Out/", logFileString2)
outFile3 = file.path("./Out/", logFileString3)
outFile4 = file.path("./Out/", logFileString4)
setRestartSettings(mcmc1, "./Out/Restart/restartPAAugust2018File.rst", adaptiveWidth, TRUE)
setRestartSettings(mcmc2, "./Out/Restart/restartPAAugust2018File.rst", adaptiveWidth, TRUE)
setRestartSettings(mcmc3, "./Out/Restart/restartPAAugust2018File.rst", adaptiveWidth, TRUE)
setRestartSettings(mcmc4, "./Out/Restart/restartPAAugust2018File.rst", adaptiveWidth, TRUE)
sink(outFile1)
system.time(
runMCMC(mcmc1, genome, model1, ncores = 3, divergence.iteration = 10)
)
sink()
sink(outFile2)
system.time(
runMCMC(mcmc2, genome, model2, ncores = 3, divergence.iteration = 10)
)
sink()
sink(outFile3)
system.time(
runMCMC(mcmc3, genome, model3, ncores = 3, divergence.iteration = 10)
)
sink()
sink(outFile4)
system.time(
runMCMC(mcmc4, genome, model4, ncores = 3, divergence.iteration = 10)
)
sink()
#########################################################################################
### Output File 1: MCMC, Loglikelihood, Mixture Probability, Mphi, Sphi, Expected Phi ###
#########################################################################################
# plots different aspects of trace
trace <- parameter1$getTraceObject()
ylab = "log(Posterior Probability)"
writeMCMCObject(mcmc1, file = file.path("Out/", "MCMCJeremyObject.Rdat"))
pdf(file.path("./Out/", "RFP_Jeremy_allUnique_startCSP_startPhi_adaptSphi_true.pdf"))
trace1 <- mcmc1$getLogLikelihoodTrace()
trace2 <- mcmc2$getLogLikelihoodTrace()
trace3 <- mcmc3$getLogLikelihoodTrace()
trace4 <- mcmc4$getLogLikelihoodTrace()
trace1 <- trace1[-1]
trace2 <- trace2[-1]
trace3 <- trace3[-1]
trace4 <- trace4[-1]
trace1.length <- length(trace1)
trace2.length <- length(trace2)
trace3.length <- length(trace3)
trace4.length <- length(trace4)
zoomStart1 <- round(0.9*trace1.length)
zoomStart2 <- round(0.9*trace2.length)
zoomStart3 <- round(0.9*trace3.length)
zoomStart4 <- round(0.9*trace4.length)
zoomEnd1 <- trace1.length
zoomEnd1 <- trace2.length
zoomEnd1 <- trace3.length
zoomEnd1 <- trace4.length
logL <- mean(trace4[zoomStart4:trace4.length])
plot(trace1, type="l", col= "red", main=paste0(ylab, ": ", logL), xlab="Sample", ylab=ylab)
lines(trace2, col= "blue")
lines(trace3, col= "green")
lines(trace4, col= "black")
grid (NULL,NULL, lty = 6, col = "cornsilk2")
Hmisc::subplot(
plot(zoomStart1:zoomEnd1, trace1[zoomStart1:zoomEnd1], type="l", xlab=NA, ylab=NA, las=2, cex.axis=0.55),
0.8*(round(0.9*trace1.length)), (min(trace1, na.rm = T)+max(trace1, na.rm = T))/2, size=c(3,2)
lines(zoomStart2:zoomEnd2, trace2[zoomStart2:zoomEnd2], col = "blue")
lines(zoomStart3:zoomEnd3, trace3[zoomStart3:zoomEnd3], col = "green")
lines(zoomStart4:zoomEnd4, trace4[zoomStart4:zoomEnd4], col = "black"))
dev.off()
