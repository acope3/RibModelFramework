#loading
useDynLib(AnaCoDa, .registration = TRUE)

#imports
importFrom(methods, new)
importFrom(Rcpp, evalCpp)
importFrom(stats, cov, dlnorm)
importFrom(mvtnorm, dmvnorm)
importFrom(VGAM, vglm, multinomial)

importFrom(graphics, abline, axis, box, grid, hist,
      layout, legend, lines, pairs, par, plot,
      points, segments, text)
importFrom(stats, lm, median, qt, quantile, sd, acf)
importFrom(utils, write.csv)
importFrom(grDevices, adjustcolor, rgb)
importFrom(graphics , mtext, title)

S3method(length, Rcpp_Genome)
S3method(summary, Rcpp_Genome)
S3method(writeParameterObject, Rcpp_ROCParameter)
S3method(writeParameterObject, Rcpp_PAParameter)
S3method(writeParameterObject, Rcpp_PANSEParameter)
S3method(writeParameterObject, Rcpp_FONSEParameter)
S3method(convergence.test, Rcpp_MCMCAlgorithm)
S3method(convergence.test, Rcpp_Trace)
S3method(convergence.test, Rcpp_ROCParameter)
S3method(convergence.test, Rcpp_PANSEParameter)

S3method(plot, Rcpp_ROCParameter)
S3method(plot, Rcpp_FONSEParameter)
S3method(plot, Rcpp_PAParameter)
S3method(plot, Rcpp_ROCModel)
S3method(plot, Rcpp_FONSEModel)
S3method(plot, Rcpp_MCMCAlgorithm)
S3method(plot, Rcpp_Trace)


#exports
if(sum(grep("\\.9[0-9]{3}", packageVersion("AnaCoDa")))==1)
{   # Working with development version of package (i.e. 1.4.0.9001) so export everything
    exportPattern("^[[:alpha:]]+") #<- if commented out, only functions explicitly exported will be exposed 
}else{
    ## Non-development version
    export(
        ## Parameter object
        "calculateMarginalLogLikelihood",
        "extractBaseObject",
        "findOptimalCodon",
        "geomMean",
        "getCSPEstimates",
        "getExpressionEstimates",
        "getMixtureAssignmentEstimate",
        "getSelectionCoefficients",
        "getTrace",
        "initializeParameterObject",
        "loadParameterObject",
        "writeParameterObject",
                                        #"confidenceInterval.plot",

        ## Model object
        "initializeModelObject",

        ## Genome object
        "addObservedSynthesisRateSet",
        "calculateSCUO",
        "getCAI",
        "getCAIweights",
        "getCodonCounts",
        "getCodonCountsForAA",
        "getNames",
        "getNc",
        "getNcAA",
        "getObservedSynthesisRateSet",
        "initializeGenomeObject",

        ## MCMC object
        "initializeMCMCObject",
        "loadMCMCObject",
        "runMCMC",
        "setRestartSettings",
        "writeMCMCObject",

        ## Trace object

        ## shared functions
        "convergence.test",

                                        #Static C++ functions
        "AAToCodon",
        "aminoAcids",
        "codonToAA",
        "codons",

        ##
        "acfMCMC",
        "acfCSP"

    )

}



