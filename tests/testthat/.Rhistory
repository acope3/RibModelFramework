genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
genome <- initializeGenomeObject(file = genome.file)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
length(genome)
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
umMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
numMixtures <- 1
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
rm(list=ls())
library(AnaCoDa)
with.phi <- TRUE
fon <- FALSE #fix observation noise
genome.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR.fasta"
expression.file <- "UnitTestingData/testMCMCROCFiles/simulatedAllUniqueR_phi_withPhiSet.csv"
if (with.phi) {
genome <- initializeGenomeObject(file = genome.file, observed.expression.file = expression.file, match.expression.by.id = F)
} else {
genome <- initializeGenomeObject(file = genome.file)
}
numMixtures <- 2
sphi_init <- rep(1, numMixtures)
mixDef <- "allUnique"
geneAssignment <- rep(1,length(genome)) #sample(x = 1:2, size = length(genome), replace = T) #
#init.phi <- read.csv(file = "results/gossypii/gossypii_restart_from_fixedSE2_phi.csv", header = T, as.is=T)[,2]
#parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, initial.expression.values = init.phi,
#                                       split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01, 0.01, 0.01))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
geneAssignment <- sample(x = 1:numMixtures, size = length(genome), replace = T) #
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment,
split.serine = TRUE, mixture.definition = mixDef, init.sepsilon = c(0.01))
samples <- 400
thining <- 10
adaptiveWidth <- 50
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples, thining, adaptive.width=adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE, est.mix = TRUE)
model <- initializeModelObject(parameter, "ROC", with.phi = with.phi, fix.observation.noise = fon)
system.time(runMCMC(mcmc, genome, model, 4, divergence.iteration))
getwd()
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
MutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
MutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
### With Phi
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectiosHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input with Phi, same log posterior", {
knownLogPosterior <- -828047
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
### Without Phi
set.seed(446141)
genome <- initializeGenomeObject(file = fileName)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectiosHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = FALSE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogWithoutPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input without Phi, same log posterior", {
knownLogPosterior <- -831329
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
MutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
MutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
MutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
MutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
mutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
mutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
mutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
mutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
# Ensure the input files exist.
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
### With Phi
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectiosHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
### With Phi
>>>>>>> 563366ad7be7bd196300d0d9634d423b1b43c00b
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectionHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
### With Phi
>>>>>>> 563366ad7be7bd196300d0d9634d423b1b43c00b
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectionHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
>>>>>>> 563366ad7be7bd196300d0d9634d423b1b43c00b
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input with Phi, same log posterior", {
knownLogPosterior <- -828047
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
### Without Phi
set.seed(446141)
genome <- initializeGenomeObject(file = fileName)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectiosHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = FALSE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogWithoutPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input without Phi, same log posterior", {
knownLogPosterior <- -831329
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
library(testthat)
library(AnaCoDa)
context("MCMC with ROC")
# This file currently checks the logPosterior recorded at iteration 100, between an old, hard-coded test and a current Unit Test.
# Two tests are run: one with Phi, one without Phi. The existence of the relevant input files is also checked.
# Possible implementation change: take the logPosterior value and hard code it here, and compare via
# mcmc$getLogPosteriorTrace(), which returns a vector. Get the average of these values
# and compare it with the hard-coded average of logPosteriorTrace.
# In R, file.path is faster than paste
fileName = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR.fasta")
expressionFile = file.path("UnitTestingData", "testMCMCROCFiles", "simulatedAllUniqueR_phi_withPhiSet.csv")
selectionMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
selectionHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
mutationMainFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv")
mutationHtFile = file.path("UnitTestingData", "testMCMCROCFiles", "mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv")
# Ensure the input files exist.
test_that("file exists: simulatedAllUniqueR.fasta", {
expect_equal(file.exists(fileName), T)
})
test_that("file exists: simulatedAllUniqueR_phi_withPhiSet.csv", {
expect_equal(file.exists(expressionFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(selectionMainFile), T)
})
test_that("file exists: selection_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(selectionHtFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_main_liberal.csv", {
expect_equal(file.exists(mutationMainFile), T)
})
test_that("file exists: mutation_mod_Ecoli_K12_MG1655_ncbi_ht_liberal.csv", {
expect_equal(file.exists(mutationHtFile), T)
})
sphi_init <- c(1,1)
numMixtures <- 2
mixDef <- "allUnique"
samples <- 10
thinning <- 10
adaptiveWidth <- 10
divergence.iteration <- 0
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
### With Phi
VGAM::familyname()
VGAM::familyname("multinomial")
help(multinomr)
help(multinomial)
mcmc <- initializeMCMCObject(samples = samples, thinning = thinning, adaptive.width = adaptiveWidth,
est.expression=TRUE, est.csp=TRUE, est.hyper=TRUE)
>>>>>>> 563366ad7be7bd196300d0d9634d423b1b43c00b
set.seed(446141)
genome <- initializeGenomeObject(file = fileName, observed.expression.file = expressionFile, match.expression.by.id=FALSE)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectionHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = TRUE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input with Phi, same log posterior", {
knownLogPosterior <- -953149
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
### Without Phi
set.seed(446141)
genome <- initializeGenomeObject(file = fileName)
geneAssignment <- sample(c(1,2), size = length(genome), replace = TRUE, prob = c(0.3, 0.7)) #c(rep(1,500), rep(2,500))
parameter <- initializeParameterObject(genome, sphi_init, numMixtures, geneAssignment, split.serine = TRUE, mixture.definition = mixDef)
parameter$initSelectionCategories(c(selectionMainFile, selectiosHtFile), 2)
parameter$initMutationCategories(c(mutationMainFile, mutationHtFile), 2)
model <- initializeModelObject(parameter, "ROC", with.phi = FALSE)
outFile = file.path("UnitTestingOut", "testMCMCROCLogWithoutPhi.txt")
sink(outFile)
runMCMC(mcmc, genome, model, 1, divergence.iteration)
sink()
test_that("identical MCMC-ROC input without Phi, same log posterior", {
knownLogPosterior <- -879815
testLogPosterior <- round(mcmc$getLogPosteriorTrace()[10])
expect_equal(knownLogPosterior, testLogPosterior)
})
warnings()
>>>>>>> 563366ad7be7bd196300d0d9634d423b1b43c00b
setwd("/run/user/1000/gvfs/sftp:host=gauley.bio.utk.edu/export/home/acope3/RibModelFramework/tests/testthat")
source('/run/user/1000/gvfs/sftp:host=gauley.bio.utk.edu/export/home/acope3/RibModelFramework/tests/testthat/testMCMCROC.R')
source('/run/user/1000/gvfs/sftp:host=gauley.bio.utk.edu/export/home/acope3/RibModelFramework/tests/testthat/testMCMCROC.R')
source('/run/user/1000/gvfs/sftp:host=gauley.bio.utk.edu/export/home/acope3/RibModelFramework/tests/testthat/testMCMCROC.R')
